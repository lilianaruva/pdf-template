{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _layoutText = _interopRequireDefault(require(\"../text/layoutText\"));\n\nvar isType = function isType(type) {\n  return function (node) {\n    return node.type === type;\n  };\n};\n\nvar isSvg = isType(P.Svg);\nvar isText = isType(P.Text);\n\nvar shouldIterate = function shouldIterate(node) {\n  return !isSvg(node) && !isText(node);\n};\n\nvar shouldLayoutText = function shouldLayoutText(node) {\n  return isText(node) && !node.lines;\n};\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\n\n\nvar resolveTextLayout = function resolveTextLayout(node, fontStore) {\n  if (shouldLayoutText(node)) {\n    var width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n    var height = node.box.height - (node.box.paddingTop + node.box.paddingBottom); // eslint-disable-next-line no-param-reassign\n\n    node.lines = (0, _layoutText.default)(node, width, height, fontStore);\n  }\n\n  if (shouldIterate(node)) {\n    if (!node.children) return node;\n\n    var mapChild = function mapChild(child) {\n      return resolveTextLayout(child, fontStore);\n    };\n\n    var children = node.children.map(mapChild);\n    return Object.assign({}, node, {\n      children: children\n    });\n  }\n\n  return node;\n};\n\nvar _default = resolveTextLayout;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","P","_layoutText","isType","type","node","isSvg","Svg","isText","Text","shouldIterate","shouldLayoutText","lines","resolveTextLayout","fontStore","width","box","paddingRight","paddingLeft","height","paddingTop","paddingBottom","children","mapChild","child","map","Object","assign","_default"],"sources":["C:/Users/lilyg/OneDrive/Documentos/TRABAJO/pppcalc/k81v6q/node_modules/@react-pdf/layout/lib/steps/resolveTextLayout.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _layoutText = _interopRequireDefault(require(\"../text/layoutText\"));\n\nvar isType = function isType(type) {\n  return function (node) {\n    return node.type === type;\n  };\n};\n\nvar isSvg = isType(P.Svg);\nvar isText = isType(P.Text);\n\nvar shouldIterate = function shouldIterate(node) {\n  return !isSvg(node) && !isText(node);\n};\n\nvar shouldLayoutText = function shouldLayoutText(node) {\n  return isText(node) && !node.lines;\n};\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\n\n\nvar resolveTextLayout = function resolveTextLayout(node, fontStore) {\n  if (shouldLayoutText(node)) {\n    var width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n    var height = node.box.height - (node.box.paddingTop + node.box.paddingBottom); // eslint-disable-next-line no-param-reassign\n\n    node.lines = (0, _layoutText.default)(node, width, height, fontStore);\n  }\n\n  if (shouldIterate(node)) {\n    if (!node.children) return node;\n\n    var mapChild = function mapChild(child) {\n      return resolveTextLayout(child, fontStore);\n    };\n\n    var children = node.children.map(mapChild);\n    return Object.assign({}, node, {\n      children: children\n    });\n  }\n\n  return node;\n};\n\nvar _default = resolveTextLayout;\nexports.default = _default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAAP,CAAwDC,OAArF;;AAEA,IAAIC,uBAAuB,GAAGF,OAAO,CAAC,+CAAD,CAAP,CAAyDC,OAAvF;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACF,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAII,CAAC,GAAGH,uBAAuB,CAACF,OAAO,CAAC,uBAAD,CAAR,CAA/B;;AAEA,IAAIM,WAAW,GAAGP,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAxC;;AAEA,IAAIO,MAAM,GAAG,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;EACjC,OAAO,UAAUC,IAAV,EAAgB;IACrB,OAAOA,IAAI,CAACD,IAAL,KAAcA,IAArB;EACD,CAFD;AAGD,CAJD;;AAMA,IAAIE,KAAK,GAAGH,MAAM,CAACF,CAAC,CAACM,GAAH,CAAlB;AACA,IAAIC,MAAM,GAAGL,MAAM,CAACF,CAAC,CAACQ,IAAH,CAAnB;;AAEA,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBL,IAAvB,EAA6B;EAC/C,OAAO,CAACC,KAAK,CAACD,IAAD,CAAN,IAAgB,CAACG,MAAM,CAACH,IAAD,CAA9B;AACD,CAFD;;AAIA,IAAIM,gBAAgB,GAAG,SAASA,gBAAT,CAA0BN,IAA1B,EAAgC;EACrD,OAAOG,MAAM,CAACH,IAAD,CAAN,IAAgB,CAACA,IAAI,CAACO,KAA7B;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BR,IAA3B,EAAiCS,SAAjC,EAA4C;EAClE,IAAIH,gBAAgB,CAACN,IAAD,CAApB,EAA4B;IAC1B,IAAIU,KAAK,GAAGV,IAAI,CAACW,GAAL,CAASD,KAAT,IAAkBV,IAAI,CAACW,GAAL,CAASC,YAAT,GAAwBZ,IAAI,CAACW,GAAL,CAASE,WAAnD,CAAZ;IACA,IAAIC,MAAM,GAAGd,IAAI,CAACW,GAAL,CAASG,MAAT,IAAmBd,IAAI,CAACW,GAAL,CAASI,UAAT,GAAsBf,IAAI,CAACW,GAAL,CAASK,aAAlD,CAAb,CAF0B,CAEqD;;IAE/EhB,IAAI,CAACO,KAAL,GAAa,CAAC,GAAGV,WAAW,CAACL,OAAhB,EAAyBQ,IAAzB,EAA+BU,KAA/B,EAAsCI,MAAtC,EAA8CL,SAA9C,CAAb;EACD;;EAED,IAAIJ,aAAa,CAACL,IAAD,CAAjB,EAAyB;IACvB,IAAI,CAACA,IAAI,CAACiB,QAAV,EAAoB,OAAOjB,IAAP;;IAEpB,IAAIkB,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;MACtC,OAAOX,iBAAiB,CAACW,KAAD,EAAQV,SAAR,CAAxB;IACD,CAFD;;IAIA,IAAIQ,QAAQ,GAAGjB,IAAI,CAACiB,QAAL,CAAcG,GAAd,CAAkBF,QAAlB,CAAf;IACA,OAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBtB,IAAlB,EAAwB;MAC7BiB,QAAQ,EAAEA;IADmB,CAAxB,CAAP;EAGD;;EAED,OAAOjB,IAAP;AACD,CAtBD;;AAwBA,IAAIuB,QAAQ,GAAGf,iBAAf;AACAd,OAAO,CAACF,OAAR,GAAkB+B,QAAlB"},"metadata":{},"sourceType":"script"}