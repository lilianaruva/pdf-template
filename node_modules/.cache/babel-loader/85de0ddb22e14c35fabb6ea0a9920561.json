{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _yoga = _interopRequireDefault(require(\"@react-pdf/yoga\"));\n\nvar _layoutText = _interopRequireDefault(require(\"./layoutText\"));\n\nvar _linesWidth = _interopRequireDefault(require(\"./linesWidth\"));\n\nvar _linesHeight = _interopRequireDefault(require(\"./linesHeight\"));\n/* eslint-disable no-param-reassign */\n\n\nvar ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n/**\n * Yoga text measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} text width and height\n */\n\nvar measureText = function measureText(page, node, fontStore) {\n  return function (width, widthMode, height) {\n    if (widthMode === _yoga.default.MEASURE_MODE_EXACTLY) {\n      if (!node.lines) node.lines = (0, _layoutText.default)(node, width, height, fontStore);\n      return {\n        height: (0, _linesHeight.default)(node)\n      };\n    }\n\n    if (widthMode === _yoga.default.MEASURE_MODE_AT_MOST) {\n      var _node$style;\n\n      var alignFactor = ALIGNMENT_FACTORS[(_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.textAlign] || 0;\n\n      if (!node.lines) {\n        node.lines = (0, _layoutText.default)(node, width, height, fontStore);\n        node.alignOffset = (width - (0, _linesWidth.default)(node)) * alignFactor; // Compensate align in variable width containers\n      }\n\n      return {\n        height: (0, _linesHeight.default)(node),\n        width: Math.min(width, (0, _linesWidth.default)(node))\n      };\n    }\n\n    return {};\n  };\n};\n\nvar _default = measureText;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","exports","__esModule","_yoga","_layoutText","_linesWidth","_linesHeight","ALIGNMENT_FACTORS","center","right","measureText","page","node","fontStore","width","widthMode","height","MEASURE_MODE_EXACTLY","lines","MEASURE_MODE_AT_MOST","_node$style","alignFactor","style","textAlign","alignOffset","Math","min","_default"],"sources":["C:/Users/lilyg/OneDrive/Documentos/TRABAJO/pppcalc/k81v6q/node_modules/@react-pdf/layout/lib/text/measureText.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _yoga = _interopRequireDefault(require(\"@react-pdf/yoga\"));\n\nvar _layoutText = _interopRequireDefault(require(\"./layoutText\"));\n\nvar _linesWidth = _interopRequireDefault(require(\"./linesWidth\"));\n\nvar _linesHeight = _interopRequireDefault(require(\"./linesHeight\"));\n\n/* eslint-disable no-param-reassign */\nvar ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n/**\n * Yoga text measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} text width and height\n */\n\nvar measureText = function measureText(page, node, fontStore) {\n  return function (width, widthMode, height) {\n    if (widthMode === _yoga.default.MEASURE_MODE_EXACTLY) {\n      if (!node.lines) node.lines = (0, _layoutText.default)(node, width, height, fontStore);\n      return {\n        height: (0, _linesHeight.default)(node)\n      };\n    }\n\n    if (widthMode === _yoga.default.MEASURE_MODE_AT_MOST) {\n      var _node$style;\n\n      var alignFactor = ALIGNMENT_FACTORS[(_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.textAlign] || 0;\n\n      if (!node.lines) {\n        node.lines = (0, _layoutText.default)(node, width, height, fontStore);\n        node.alignOffset = (width - (0, _linesWidth.default)(node)) * alignFactor; // Compensate align in variable width containers\n      }\n\n      return {\n        height: (0, _linesHeight.default)(node),\n        width: Math.min(width, (0, _linesWidth.default)(node))\n      };\n    }\n\n    return {};\n  };\n};\n\nvar _default = measureText;\nexports.default = _default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAAP,CAAwDC,OAArF;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACD,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIG,KAAK,GAAGL,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAAlC;;AAEA,IAAIK,WAAW,GAAGN,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIM,WAAW,GAAGP,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIO,YAAY,GAAGR,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;AAEA;;;AACA,IAAIQ,iBAAiB,GAAG;EACtBC,MAAM,EAAE,GADc;EAEtBC,KAAK,EAAE;AAFe,CAAxB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,SAAjC,EAA4C;EAC5D,OAAO,UAAUC,KAAV,EAAiBC,SAAjB,EAA4BC,MAA5B,EAAoC;IACzC,IAAID,SAAS,KAAKZ,KAAK,CAACH,OAAN,CAAciB,oBAAhC,EAAsD;MACpD,IAAI,CAACL,IAAI,CAACM,KAAV,EAAiBN,IAAI,CAACM,KAAL,GAAa,CAAC,GAAGd,WAAW,CAACJ,OAAhB,EAAyBY,IAAzB,EAA+BE,KAA/B,EAAsCE,MAAtC,EAA8CH,SAA9C,CAAb;MACjB,OAAO;QACLG,MAAM,EAAE,CAAC,GAAGV,YAAY,CAACN,OAAjB,EAA0BY,IAA1B;MADH,CAAP;IAGD;;IAED,IAAIG,SAAS,KAAKZ,KAAK,CAACH,OAAN,CAAcmB,oBAAhC,EAAsD;MACpD,IAAIC,WAAJ;;MAEA,IAAIC,WAAW,GAAGd,iBAAiB,CAAC,CAACa,WAAW,GAAGR,IAAI,CAACU,KAApB,MAA+B,IAA/B,IAAuCF,WAAW,KAAK,KAAK,CAA5D,GAAgE,KAAK,CAArE,GAAyEA,WAAW,CAACG,SAAtF,CAAjB,IAAqH,CAAvI;;MAEA,IAAI,CAACX,IAAI,CAACM,KAAV,EAAiB;QACfN,IAAI,CAACM,KAAL,GAAa,CAAC,GAAGd,WAAW,CAACJ,OAAhB,EAAyBY,IAAzB,EAA+BE,KAA/B,EAAsCE,MAAtC,EAA8CH,SAA9C,CAAb;QACAD,IAAI,CAACY,WAAL,GAAmB,CAACV,KAAK,GAAG,CAAC,GAAGT,WAAW,CAACL,OAAhB,EAAyBY,IAAzB,CAAT,IAA2CS,WAA9D,CAFe,CAE4D;MAC5E;;MAED,OAAO;QACLL,MAAM,EAAE,CAAC,GAAGV,YAAY,CAACN,OAAjB,EAA0BY,IAA1B,CADH;QAELE,KAAK,EAAEW,IAAI,CAACC,GAAL,CAASZ,KAAT,EAAgB,CAAC,GAAGT,WAAW,CAACL,OAAhB,EAAyBY,IAAzB,CAAhB;MAFF,CAAP;IAID;;IAED,OAAO,EAAP;EACD,CAzBD;AA0BD,CA3BD;;AA6BA,IAAIe,QAAQ,GAAGjB,WAAf;AACAT,OAAO,CAACD,OAAR,GAAkB2B,QAAlB"},"metadata":{},"sourceType":"script"}