{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _yoga = _interopRequireDefault(require(\"@react-pdf/yoga\"));\n\nvar getAspectRatio = function getAspectRatio(viewbox) {\n  if (!viewbox) return null;\n  return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);\n};\n/**\n * Yoga svg measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} canvas width and height\n */\n\n\nvar measureCanvas = function measureCanvas(page, node) {\n  return function (width, widthMode, height, heightMode) {\n    var aspectRatio = getAspectRatio(node.props.viewBox) || 1;\n\n    if (widthMode === _yoga.default.MEASURE_MODE_EXACTLY || widthMode === _yoga.default.MEASURE_MODE_AT_MOST) {\n      return {\n        width: width,\n        height: width / aspectRatio\n      };\n    }\n\n    if (heightMode === _yoga.default.MEASURE_MODE_EXACTLY) {\n      return {\n        width: height * aspectRatio\n      };\n    }\n\n    return {};\n  };\n};\n\nvar _default = measureCanvas;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","exports","__esModule","_yoga","getAspectRatio","viewbox","maxX","minX","maxY","minY","measureCanvas","page","node","width","widthMode","height","heightMode","aspectRatio","props","viewBox","MEASURE_MODE_EXACTLY","MEASURE_MODE_AT_MOST","_default"],"sources":["C:/Users/lilyg/OneDrive/Documentos/TRABAJO/pppcalc/k81v6q/node_modules/@react-pdf/layout/lib/svg/measureSvg.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _yoga = _interopRequireDefault(require(\"@react-pdf/yoga\"));\n\nvar getAspectRatio = function getAspectRatio(viewbox) {\n  if (!viewbox) return null;\n  return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);\n};\n/**\n * Yoga svg measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} canvas width and height\n */\n\n\nvar measureCanvas = function measureCanvas(page, node) {\n  return function (width, widthMode, height, heightMode) {\n    var aspectRatio = getAspectRatio(node.props.viewBox) || 1;\n\n    if (widthMode === _yoga.default.MEASURE_MODE_EXACTLY || widthMode === _yoga.default.MEASURE_MODE_AT_MOST) {\n      return {\n        width: width,\n        height: width / aspectRatio\n      };\n    }\n\n    if (heightMode === _yoga.default.MEASURE_MODE_EXACTLY) {\n      return {\n        width: height * aspectRatio\n      };\n    }\n\n    return {};\n  };\n};\n\nvar _default = measureCanvas;\nexports.default = _default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAAP,CAAwDC,OAArF;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACD,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIG,KAAK,GAAGL,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAAlC;;AAEA,IAAIK,cAAc,GAAG,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;EACpD,IAAI,CAACA,OAAL,EAAc,OAAO,IAAP;EACd,OAAO,CAACA,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACE,IAAxB,KAAiCF,OAAO,CAACG,IAAR,GAAeH,OAAO,CAACI,IAAxD,CAAP;AACD,CAHD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;EACrD,OAAO,UAAUC,KAAV,EAAiBC,SAAjB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgD;IACrD,IAAIC,WAAW,GAAGb,cAAc,CAACQ,IAAI,CAACM,KAAL,CAAWC,OAAZ,CAAd,IAAsC,CAAxD;;IAEA,IAAIL,SAAS,KAAKX,KAAK,CAACH,OAAN,CAAcoB,oBAA5B,IAAoDN,SAAS,KAAKX,KAAK,CAACH,OAAN,CAAcqB,oBAApF,EAA0G;MACxG,OAAO;QACLR,KAAK,EAAEA,KADF;QAELE,MAAM,EAAEF,KAAK,GAAGI;MAFX,CAAP;IAID;;IAED,IAAID,UAAU,KAAKb,KAAK,CAACH,OAAN,CAAcoB,oBAAjC,EAAuD;MACrD,OAAO;QACLP,KAAK,EAAEE,MAAM,GAAGE;MADX,CAAP;IAGD;;IAED,OAAO,EAAP;EACD,CAjBD;AAkBD,CAnBD;;AAqBA,IAAIK,QAAQ,GAAGZ,aAAf;AACAT,OAAO,CAACD,OAAR,GAAkBsB,QAAlB"},"metadata":{},"sourceType":"script"}